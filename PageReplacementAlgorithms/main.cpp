#include <random>
#include <string>
#include <vector>
#include <iostream>

#define DESIRED_STRING_LENGTH 100000
#define RATE_OF_MOTION 200
#define START_LOCATION 0
#define VIRTUAL_MEMORY_SIZE 262144 // 2^18

using namespace std;

/*
    Generates a reference string given parameters of desired size.
    @param p virtual memory size
    @param s starting location
    @param e size of L
    @param m rate of motion
    @param t virtual memory size
    @param size desired length of reference string
    @return returns the genereated reference string
*/
string generateRS(int P, int s, int e, int m, double t, int size)
{
    string rs;
    while (rs.size() < size)
    {
        random_device rdi;
        mt19937 rng(rdi());
        uniform_int_distribution<mt19937::result_type> disti(s, s + e);
        for (int i = 0; i < m; ++i)
        {
            rs += to_string(disti(rng));
        }

        random_device rdf;
        default_random_engine eng(rdf());
        uniform_real_distribution<float> distf(0, 1);
        float r = distf(eng);

        if (r < t)
        {
            random_device rdis;
            mt19937 rngs(rdis());
            uniform_int_distribution<mt19937::result_type> distis(s, P - 1);
            s = distis(rngs);
        }
        else
        {
            ++s;
            s %= P;
        }
    }
    return rs;
}

int main()
{
    vector<string> RS_set;
    vector<int> e_set = { 5, 10, 20, 50, 100 };
    vector<float> t_set = { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0 };

    for (auto e : e_set)
    {
        for (auto t : t_set)
        {
            RS_set.emplace_back(generateRS(VIRTUAL_MEMORY_SIZE, 
                START_LOCATION, e, RATE_OF_MOTION, t, DESIRED_STRING_LENGTH));
        }
    }

    // implement and run 2 page replacement algorithms.

    // record # of page faults generated by the different algorithms.

    // plot by hand.
}